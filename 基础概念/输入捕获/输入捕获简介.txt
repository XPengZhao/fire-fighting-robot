////////////////////////////////////////////////////////////////////////////////
  * 输入捕获模式可以用来测量脉冲宽度或者测量频率。

  * STM32 的定时器，除了 TIM6 和 TIM7，其他定时器都有输入捕获功能。

  * @ 输入捕获简述
    STM32 的输入捕获，简单的说就是通过检测 TIMx_CHx 上的边沿信号，在边沿信号发生跳变（比如
    上升沿/下降沿）的时候，将当前定时器的值（TIMx_CNT）存放到对应的通道的捕获/比较寄存器
    （TIMx_CCRx）里面，完成一次捕获。同时还可以配置捕获时是否触发中断/DMA 等。
////

/** 
  ------------------------------需要用到的寄存器----------------------------------
  @ 所需寄存器简介

  * 官方提供的固件库对底层的寄存器操作进行了封装。所以只要调用库函数即可操作寄存器。
  * 如需直接操作寄存器，可直接查找寄存器版本的代码。

  * 需要用到的寄存器有：TIMx_ARR、 TIMx_PSC、TIMx_CCMRx、TIMx_CCER、TIMx_DIER、
    TIMx_CR1、TIMx_CCRx 

  * ----------------TIMx_ARR----------------
    @ TIMx_ARR
    TIMx_ARR:自动装载寄存器

  * ----------------TIMx_PSC----------------
    @ TIMx_PSC
    TIMx_PSC:预分频器寄存器

  * ---------------TIMx_CCMRx---------------
    @ TIMx_CCMRx
    TIMx_CCMRx:捕获/比较模式寄存器

    实际有两个寄存器：TIMx_CCMR1与TIMx_CCMR2
    TIMx_CCMR1控制TIMx_CH1与TIMx_CH2
    TIMx_CCMR2控制TIMx_CH3与TIMx_CH4

  * ---------------TIMx_CCER----------------
    @ TIMx_CCER
    TIM_CCER:捕获/比较使能寄存器

  * ---------------TIMx_DIER----------------
    @ TIM_DIER
    TIM_DIER:DMA/中断使能寄存器
  
  * ----------------TIMx_CR1----------------
    @TIM_CR1
    TIM_CR1:控制寄存器
  * ---------------TIMx_CCRx----------------
    @TIMx_CCRx
    TIM_CCRx:捕获/比较寄存器

    实际有四个寄存器：TIMx_CCR1、TIMx_CCR2、TIMx_CCR3、TIMx_CCR4
    TIMx_CCR1 可以读出捕获通道1(TIMx_CH1)捕获发生时刻的 TIMx_CNT 值
    TIMx_CCR2 可以读出捕获通道2(TIMx_CH2)捕获发生时刻的 TIMx_CNT 值
    TIMx_CCR3 可以读出捕获通道3(TIMx_CH3)捕获发生时刻的 TIMx_CNT 值
    TIMx_CCR4 可以读出捕获通道4(TIMx_CH4)捕获发生时刻的 TIMx_CNT 值
  
  */

================================================================================

/** 
  ------------------------------捕获高电平脉宽的思路-------------------------------
  @ 测量高电平脉宽程序设计
  * --------------------测量流程---------------------
    配置、使能需要用到的计时器、中断、GPIO口，且捕获通道设置为上升沿捕获
    ---> TIM3_CH3对应的引脚PB.0等待高电平
    ---> 捕获通道3成功捕获上升沿，进入捕获中断。
    ---> 


  * --------------------硬件设计---------------------
    在这里，我们用到的是TIM3的捕获通道3(TIM3_CH3)来测量高电平脉宽。
    查找数据手册可知，PB.0引脚对应的是TIM3_CH3。
    ===============================================

  * --------------------程序思路---------------------

    @ 第1步-->端口与计时器配置与使能

      * 定义GPIO口配置、计时器配置、中断配置结构体。后面会用到。
        {
          GPIO_InitTypeDef  GPIO_InitStructure;
          TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
          NVIC_InitTypeDef  NVIC_InitStructure;
        }
        关于这些结构体的用法，可以查看库函数中的定义，或者查看对应章节的知识。

      * 因为要用到PB.0与TIM3，首先使能GPIOB与TIM3的时钟。
        其中GPIOx的时钟挂在APB2下，TIM3的时钟挂在APB1下。
        {
          RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);    //使能TIM3时钟
          RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);   //使能GPIOB时钟
        }

      * 配置PB.0的参数并根据设定值初始化PB.0
        {
          GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_0;    //PB.0 清除之前设置  
          GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; //PB.0 上拉输入
          GPIO_Init(GPIOB, &GPIO_InitStructure);        //根据设定值初始化PB.0
          GPIO_ResetBits(GPIOB,GPIO_Pin_0);             //PB.0 设置为低电平
        }

      * 配置TIM3的参数并根据设定值初始化TIM3
      {
        TIM_TimeBaseStructure.TIM_Period = arr; 				  //设定计数器自动重装值 
        TIM_TimeBaseStructure.TIM_Prescaler =psc; 				//预分频器   
        TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1; //设置时钟分割:TDTS = Tck_tim
	      TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
	      TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure); //初始化TIMx的时间基数单位
      }

      * 配置TIM3的输入通道与捕获通道的相关参数
        TIM3的通道3(TIM3_CH3)对应输入通道3，即TI3(TIM INPUT 3),要将其映射到捕获通道3(IC3)上
        {
        	TIM3_ICInitStructure.TIM_Channel = TIM_Channel_3; 
          //选择TIM3_CH3
  	      TIM3_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;	
          //设置上升沿捕获(捕获从低电平上升到高电平的时刻)
  	      TIM3_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI; 
          //TI3映射到IC3上
  	      TIM3_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;	 
          //配置输入分频,不分频 
  	      TIM3_ICInitStructure.TIM_ICFilter = 0x00;
          //配置输入滤波器 不滤波
  	      TIM_ICInit(TIM3, &TIM3_ICInitStructure);
          //根据输入参数初始化输入捕获通道3
        }
      
      * 配置中断分组
      {
        NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;  
        //TIM3中断
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;  
        //先占优先级2级
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;  
        //从优先级0级
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; 
        //IRQ通道被使能
        NVIC_Init(&NVIC_InitStructure);  
        //根据NVIC_InitStruct中指定的参数初始化外设NVIC
      }

      * 使能更新中断、捕获中断与TIM3
      {
        TIM_ITConfig(TIM3,TIM_IT_Update|TIM_IT_CC3,ENABLE);
        TIM_Cmd(TIM3,ENABLE);
      }
    ////

    @ 第2步-->配置更新中断服务函数与捕获中断服务函数

      * 













